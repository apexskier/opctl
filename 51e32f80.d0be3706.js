(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{165:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return u}));var n=r(1),i=r(9),a=(r(0),r(216)),o={title:"Dir"},c={id:"reference/opspec/types/dir",title:"Dir",description:"Dir typed values are a filesystem directory entry. Dirs are passed by reference, not copied, which means changing the contents or value of a directory will cause it to change in each variable that holds it.",source:"@site/docs/reference/opspec/types/dir.md",permalink:"/docs/reference/opspec/types/dir",editUrl:"https://github.com/opctl/opctl/edit/master/website/docs/reference/opspec/types/dir.md",lastUpdatedBy:"Cameron Little",lastUpdatedAt:1617200902,sidebar:"docs",previous:{title:"Boolean",permalink:"/docs/reference/opspec/types/boolean"},next:{title:"File",permalink:"/docs/reference/opspec/types/file"}},l=[{value:"Initialization",id:"initialization",children:[{value:"Literal initialization",id:"literal-initialization",children:[]}]},{value:"Coercion",id:"coercion",children:[]}],p={rightToc:l},s="wrapper";function u(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(a.b)(s,Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Dir typed values are a filesystem directory entry. Dirs are passed by reference, not copied, which means changing the contents or value of a directory will cause it to change in each variable that holds it."),Object(a.b)("h2",{id:"initialization"},"Initialization"),Object(a.b)("p",null,"Dir values can be constructed literally or through a ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/reference/opspec/op.yml/variable-reference"}),"variable reference"),"."),Object(a.b)("h3",{id:"literal-initialization"},"Literal initialization"),Object(a.b)("p",null,"A literal dir initialization is a yaml key-value object. Keys are a single-component, absolute path name. Values are either an object with the key ",Object(a.b)("inlineCode",{parentName:"p"},"data")," and value a value or ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/reference/opspec/op.yml/variable-reference"}),"variable reference")," that can be coerced to a file, or another literal dir initialization."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"myLiteralDir:\n  /singleLineFile:\n    data: contents of /childFile1\n  /childFile\n    data: $(someVariable) # will contain the value of `someVariable`\n  /subDir:\n    /multilineFile:\n      data: |\n        multiline\n        contents of /childFile2\n  /emptySubDir: {}\n")),Object(a.b)("h2",{id:"coercion"},"Coercion"),Object(a.b)("p",null,"Dir values cannot be coerced to other types."))}u.isMDXComponent=!0},216:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return y}));var n=r(0),i=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=i.a.createContext({}),s=function(e){var t=i.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c({},t,{},e)),r},u=function(e){var t=s(e.components);return(i.a.createElement(p.Provider,{value:t},e.children))},d="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},f=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),d=n,f=u["".concat(o,".").concat(d)]||u[d]||b[d]||a;return r?i.a.createElement(f,c({ref:t},p,{components:r})):i.a.createElement(f,c({ref:t},p))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:n,o[1]=c;for(var p=2;p<a;p++)o[p]=r[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);