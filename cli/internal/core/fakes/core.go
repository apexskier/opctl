// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/opctl/opctl/cli/internal/core"
	"github.com/opctl/opctl/cli/internal/core/auth"
	"github.com/opctl/opctl/cli/internal/core/op"
)

type FakeCore struct {
	AuthStub        func() auth.Auth
	authMutex       sync.RWMutex
	authArgsForCall []struct {
	}
	authReturns struct {
		result1 auth.Auth
	}
	authReturnsOnCall map[int]struct {
		result1 auth.Auth
	}
	LsStub        func(context.Context, string) error
	lsMutex       sync.RWMutex
	lsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	lsReturns struct {
		result1 error
	}
	lsReturnsOnCall map[int]struct {
		result1 error
	}
	OpStub        func() op.Op
	opMutex       sync.RWMutex
	opArgsForCall []struct {
	}
	opReturns struct {
		result1 op.Op
	}
	opReturnsOnCall map[int]struct {
		result1 op.Op
	}
	RunStub        func(context.Context, string, *core.RunOpts, bool) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *core.RunOpts
		arg4 bool
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	SelfUpdateStub        func(string) (string, error)
	selfUpdateMutex       sync.RWMutex
	selfUpdateArgsForCall []struct {
		arg1 string
	}
	selfUpdateReturns struct {
		result1 string
		result2 error
	}
	selfUpdateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCore) Auth() auth.Auth {
	fake.authMutex.Lock()
	ret, specificReturn := fake.authReturnsOnCall[len(fake.authArgsForCall)]
	fake.authArgsForCall = append(fake.authArgsForCall, struct {
	}{})
	fake.recordInvocation("Auth", []interface{}{})
	fake.authMutex.Unlock()
	if fake.AuthStub != nil {
		return fake.AuthStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.authReturns
	return fakeReturns.result1
}

func (fake *FakeCore) AuthCallCount() int {
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	return len(fake.authArgsForCall)
}

func (fake *FakeCore) AuthCalls(stub func() auth.Auth) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = stub
}

func (fake *FakeCore) AuthReturns(result1 auth.Auth) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = nil
	fake.authReturns = struct {
		result1 auth.Auth
	}{result1}
}

func (fake *FakeCore) AuthReturnsOnCall(i int, result1 auth.Auth) {
	fake.authMutex.Lock()
	defer fake.authMutex.Unlock()
	fake.AuthStub = nil
	if fake.authReturnsOnCall == nil {
		fake.authReturnsOnCall = make(map[int]struct {
			result1 auth.Auth
		})
	}
	fake.authReturnsOnCall[i] = struct {
		result1 auth.Auth
	}{result1}
}

func (fake *FakeCore) Ls(arg1 context.Context, arg2 string) error {
	fake.lsMutex.Lock()
	ret, specificReturn := fake.lsReturnsOnCall[len(fake.lsArgsForCall)]
	fake.lsArgsForCall = append(fake.lsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Ls", []interface{}{arg1, arg2})
	fake.lsMutex.Unlock()
	if fake.LsStub != nil {
		return fake.LsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.lsReturns
	return fakeReturns.result1
}

func (fake *FakeCore) LsCallCount() int {
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	return len(fake.lsArgsForCall)
}

func (fake *FakeCore) LsCalls(stub func(context.Context, string) error) {
	fake.lsMutex.Lock()
	defer fake.lsMutex.Unlock()
	fake.LsStub = stub
}

func (fake *FakeCore) LsArgsForCall(i int) (context.Context, string) {
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	argsForCall := fake.lsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCore) LsReturns(result1 error) {
	fake.lsMutex.Lock()
	defer fake.lsMutex.Unlock()
	fake.LsStub = nil
	fake.lsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCore) LsReturnsOnCall(i int, result1 error) {
	fake.lsMutex.Lock()
	defer fake.lsMutex.Unlock()
	fake.LsStub = nil
	if fake.lsReturnsOnCall == nil {
		fake.lsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.lsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCore) Op() op.Op {
	fake.opMutex.Lock()
	ret, specificReturn := fake.opReturnsOnCall[len(fake.opArgsForCall)]
	fake.opArgsForCall = append(fake.opArgsForCall, struct {
	}{})
	fake.recordInvocation("Op", []interface{}{})
	fake.opMutex.Unlock()
	if fake.OpStub != nil {
		return fake.OpStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.opReturns
	return fakeReturns.result1
}

func (fake *FakeCore) OpCallCount() int {
	fake.opMutex.RLock()
	defer fake.opMutex.RUnlock()
	return len(fake.opArgsForCall)
}

func (fake *FakeCore) OpCalls(stub func() op.Op) {
	fake.opMutex.Lock()
	defer fake.opMutex.Unlock()
	fake.OpStub = stub
}

func (fake *FakeCore) OpReturns(result1 op.Op) {
	fake.opMutex.Lock()
	defer fake.opMutex.Unlock()
	fake.OpStub = nil
	fake.opReturns = struct {
		result1 op.Op
	}{result1}
}

func (fake *FakeCore) OpReturnsOnCall(i int, result1 op.Op) {
	fake.opMutex.Lock()
	defer fake.opMutex.Unlock()
	fake.OpStub = nil
	if fake.opReturnsOnCall == nil {
		fake.opReturnsOnCall = make(map[int]struct {
			result1 op.Op
		})
	}
	fake.opReturnsOnCall[i] = struct {
		result1 op.Op
	}{result1}
}

func (fake *FakeCore) Run(arg1 context.Context, arg2 string, arg3 *core.RunOpts, arg4 bool) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *core.RunOpts
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Run", []interface{}{arg1, arg2, arg3, arg4})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.runReturns
	return fakeReturns.result1
}

func (fake *FakeCore) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCore) RunCalls(stub func(context.Context, string, *core.RunOpts, bool) error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeCore) RunArgsForCall(i int) (context.Context, string, *core.RunOpts, bool) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCore) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCore) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCore) SelfUpdate(arg1 string) (string, error) {
	fake.selfUpdateMutex.Lock()
	ret, specificReturn := fake.selfUpdateReturnsOnCall[len(fake.selfUpdateArgsForCall)]
	fake.selfUpdateArgsForCall = append(fake.selfUpdateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SelfUpdate", []interface{}{arg1})
	fake.selfUpdateMutex.Unlock()
	if fake.SelfUpdateStub != nil {
		return fake.SelfUpdateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.selfUpdateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCore) SelfUpdateCallCount() int {
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	return len(fake.selfUpdateArgsForCall)
}

func (fake *FakeCore) SelfUpdateCalls(stub func(string) (string, error)) {
	fake.selfUpdateMutex.Lock()
	defer fake.selfUpdateMutex.Unlock()
	fake.SelfUpdateStub = stub
}

func (fake *FakeCore) SelfUpdateArgsForCall(i int) string {
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	argsForCall := fake.selfUpdateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCore) SelfUpdateReturns(result1 string, result2 error) {
	fake.selfUpdateMutex.Lock()
	defer fake.selfUpdateMutex.Unlock()
	fake.SelfUpdateStub = nil
	fake.selfUpdateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCore) SelfUpdateReturnsOnCall(i int, result1 string, result2 error) {
	fake.selfUpdateMutex.Lock()
	defer fake.selfUpdateMutex.Unlock()
	fake.SelfUpdateStub = nil
	if fake.selfUpdateReturnsOnCall == nil {
		fake.selfUpdateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.selfUpdateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authMutex.RLock()
	defer fake.authMutex.RUnlock()
	fake.lsMutex.RLock()
	defer fake.lsMutex.RUnlock()
	fake.opMutex.RLock()
	defer fake.opMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.selfUpdateMutex.RLock()
	defer fake.selfUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.Core = new(FakeCore)
