// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/opctl/opctl/sdks/go/model"
)

type FakeStateStore struct {
	AddAuthStub        func(model.AuthAdded) error
	addAuthMutex       sync.RWMutex
	addAuthArgsForCall []struct {
		arg1 model.AuthAdded
	}
	addAuthReturns struct {
		result1 error
	}
	addAuthReturnsOnCall map[int]struct {
		result1 error
	}
	TryGetAuthStub        func(string) *model.Auth
	tryGetAuthMutex       sync.RWMutex
	tryGetAuthArgsForCall []struct {
		arg1 string
	}
	tryGetAuthReturns struct {
		result1 *model.Auth
	}
	tryGetAuthReturnsOnCall map[int]struct {
		result1 *model.Auth
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStateStore) AddAuth(arg1 model.AuthAdded) error {
	fake.addAuthMutex.Lock()
	ret, specificReturn := fake.addAuthReturnsOnCall[len(fake.addAuthArgsForCall)]
	fake.addAuthArgsForCall = append(fake.addAuthArgsForCall, struct {
		arg1 model.AuthAdded
	}{arg1})
	fake.recordInvocation("AddAuth", []interface{}{arg1})
	fake.addAuthMutex.Unlock()
	if fake.AddAuthStub != nil {
		return fake.AddAuthStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addAuthReturns
	return fakeReturns.result1
}

func (fake *FakeStateStore) AddAuthCallCount() int {
	fake.addAuthMutex.RLock()
	defer fake.addAuthMutex.RUnlock()
	return len(fake.addAuthArgsForCall)
}

func (fake *FakeStateStore) AddAuthCalls(stub func(model.AuthAdded) error) {
	fake.addAuthMutex.Lock()
	defer fake.addAuthMutex.Unlock()
	fake.AddAuthStub = stub
}

func (fake *FakeStateStore) AddAuthArgsForCall(i int) model.AuthAdded {
	fake.addAuthMutex.RLock()
	defer fake.addAuthMutex.RUnlock()
	argsForCall := fake.addAuthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateStore) AddAuthReturns(result1 error) {
	fake.addAuthMutex.Lock()
	defer fake.addAuthMutex.Unlock()
	fake.AddAuthStub = nil
	fake.addAuthReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStateStore) AddAuthReturnsOnCall(i int, result1 error) {
	fake.addAuthMutex.Lock()
	defer fake.addAuthMutex.Unlock()
	fake.AddAuthStub = nil
	if fake.addAuthReturnsOnCall == nil {
		fake.addAuthReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addAuthReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStateStore) TryGetAuth(arg1 string) *model.Auth {
	fake.tryGetAuthMutex.Lock()
	ret, specificReturn := fake.tryGetAuthReturnsOnCall[len(fake.tryGetAuthArgsForCall)]
	fake.tryGetAuthArgsForCall = append(fake.tryGetAuthArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TryGetAuth", []interface{}{arg1})
	fake.tryGetAuthMutex.Unlock()
	if fake.TryGetAuthStub != nil {
		return fake.TryGetAuthStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.tryGetAuthReturns
	return fakeReturns.result1
}

func (fake *FakeStateStore) TryGetAuthCallCount() int {
	fake.tryGetAuthMutex.RLock()
	defer fake.tryGetAuthMutex.RUnlock()
	return len(fake.tryGetAuthArgsForCall)
}

func (fake *FakeStateStore) TryGetAuthCalls(stub func(string) *model.Auth) {
	fake.tryGetAuthMutex.Lock()
	defer fake.tryGetAuthMutex.Unlock()
	fake.TryGetAuthStub = stub
}

func (fake *FakeStateStore) TryGetAuthArgsForCall(i int) string {
	fake.tryGetAuthMutex.RLock()
	defer fake.tryGetAuthMutex.RUnlock()
	argsForCall := fake.tryGetAuthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateStore) TryGetAuthReturns(result1 *model.Auth) {
	fake.tryGetAuthMutex.Lock()
	defer fake.tryGetAuthMutex.Unlock()
	fake.TryGetAuthStub = nil
	fake.tryGetAuthReturns = struct {
		result1 *model.Auth
	}{result1}
}

func (fake *FakeStateStore) TryGetAuthReturnsOnCall(i int, result1 *model.Auth) {
	fake.tryGetAuthMutex.Lock()
	defer fake.tryGetAuthMutex.Unlock()
	fake.TryGetAuthStub = nil
	if fake.tryGetAuthReturnsOnCall == nil {
		fake.tryGetAuthReturnsOnCall = make(map[int]struct {
			result1 *model.Auth
		})
	}
	fake.tryGetAuthReturnsOnCall[i] = struct {
		result1 *model.Auth
	}{result1}
}

func (fake *FakeStateStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addAuthMutex.RLock()
	defer fake.addAuthMutex.RUnlock()
	fake.tryGetAuthMutex.RLock()
	defer fake.tryGetAuthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStateStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
