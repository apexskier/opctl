(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{196:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var a=t(1),i=t(9),r=(t(0),t(216)),c={title:"Predicate"},o={id:"reference/opspec/op.yml/predicate",title:"Predicate",description:"A predicate is a condition that evaluates to a boolean value, used for conditional logic. The predicate is an object with a single key defining the type of condition.",source:"@site/docs/reference/opspec/op.yml/predicate.md",permalink:"/docs/reference/opspec/op.yml/predicate",editUrl:"https://github.com/opctl/opctl/edit/master/website/docs/reference/opspec/op.yml/predicate.md",lastUpdatedBy:"Cameron Little",lastUpdatedAt:1617280104,sidebar:"docs",previous:{title:"Markdown",permalink:"/docs/reference/opspec/op.yml/markdown"},next:{title:"Pull credentials",permalink:"/docs/reference/opspec/op.yml/pull-creds"}},l=[{value:"<code>eq</code>",id:"eq",children:[]},{value:"<code>exists</code>",id:"exists",children:[{value:"Verify a variable is in scope",id:"verify-a-variable-is-in-scope",children:[]},{value:"Verify a directory or file exists",id:"verify-a-directory-or-file-exists",children:[]},{value:"Check if an object contains a key",id:"check-if-an-object-contains-a-key",children:[]}]},{value:"<code>ne</code>",id:"ne",children:[]},{value:"<code>notExists</code>",id:"notexists",children:[{value:"Define a variable if it is not in scope",id:"define-a-variable-if-it-is-not-in-scope",children:[]},{value:"Skip a build process if artifacts exist",id:"skip-a-build-process-if-artifacts-exist",children:[]},{value:"Build a list of items",id:"build-a-list-of-items",children:[]}]}],s={rightToc:l},p="wrapper";function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)(p,Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"A predicate is a condition that evaluates to a boolean value, used for conditional logic. The predicate is an object with a single key defining the type of condition."),Object(r.b)("h2",{id:"eq"},Object(r.b)("inlineCode",{parentName:"h2"},"eq")),Object(r.b)("p",null,"An ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../types/array"}),"array"),". When all items in the array are equivalent, the predicate is true."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"run:\n  if: \n    - eq: [true, $(variable)]\n  op:\n    ref: ../op\n")),Object(r.b)("h2",{id:"exists"},Object(r.b)("inlineCode",{parentName:"h2"},"exists")),Object(r.b)("p",null,"A ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/opspec/op.yml/variable-reference"}),"variable reference"),". The predicate is true when the referenced value exists. "),Object(r.b)("h3",{id:"verify-a-variable-is-in-scope"},"Verify a variable is in scope"),Object(r.b)("p",null,"In this example, ",Object(r.b)("inlineCode",{parentName:"p"},"variable")," has not been defined, so ",Object(r.b)("inlineCode",{parentName:"p"},"../op")," is not run."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"run:\n  if: \n    - exists: $(variable)\n  op:\n    ref: ../op\n")),Object(r.b)("h3",{id:"verify-a-directory-or-file-exists"},"Verify a directory or file exists"),Object(r.b)("p",null,"This can be use to check if a build artifact has been created, for example."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"run:\n  if: \n    - exists: $(./myFile.txt)\n  op:\n    ref: ../op\n")),Object(r.b)("h3",{id:"check-if-an-object-contains-a-key"},"Check if an object contains a key"),Object(r.b)("p",null,'In this example, "hello world" is printed because the key ',Object(r.b)("inlineCode",{parentName:"p"},"foo")," in the variable exists. Without the ",Object(r.b)("inlineCode",{parentName:"p"},"exists")," check in the second call, the op would crash because of an unresolvable reference."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),'inputs:\n  value:\n    object:\n      default: { foo: "hello world" }\nrun:\n  serial:\n    - if:\n        - exists: $(value.foo)\n      container:\n        image: { ref: alpine }\n        cmd: ["echo", $(value.foo)]\n    - if:\n        - exists: $(value.bar)\n      container:\n        image: { ref: alpine }\n        cmd: ["echo", $(value.bar)]\n')),Object(r.b)("h2",{id:"ne"},Object(r.b)("inlineCode",{parentName:"h2"},"ne")),Object(r.b)("p",null,"An ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"../types/array"}),"array"),". When one or more of the items in the array aren't equivalent, the predicate is true."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"run:\n  if: \n    - ne: [true, $(variable)]\n  op:\n    ref: ../op\n")),Object(r.b)("h2",{id:"notexists"},Object(r.b)("inlineCode",{parentName:"h2"},"notExists")),Object(r.b)("p",null,"A ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/opspec/op.yml/variable-reference"}),"variable reference"),". The predicate is true when the referenced value does not exist."),Object(r.b)("h3",{id:"define-a-variable-if-it-is-not-in-scope"},"Define a variable if it is not in scope"),Object(r.b)("p",null,"In this example, ",Object(r.b)("inlineCode",{parentName:"p"},"variable")," has not been defined, so the first container sets it before the second uses it."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),'serial:\n  - if:\n      - notExists: $(variable)\n    container:\n      image: { ref: alpine }\n      cmd: [sh, -c, echo "hello world" > /output]\n      files:\n        /output: $(variable)\n  - container:\n      image: { ref: alpine }\n      cmd: ["echo", $(variable)]\n')),Object(r.b)("h3",{id:"skip-a-build-process-if-artifacts-exist"},"Skip a build process if artifacts exist"),Object(r.b)("p",null,"This can be use to speed up dev ops, if a dependency rarely changes"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"if: \n  - notExists: $(./build)\nop:\n  ref: ../build\n")),Object(r.b)("h3",{id:"build-a-list-of-items"},"Build a list of items"),Object(r.b)("p",null,"The following example will continually add items to the ",Object(r.b)("inlineCode",{parentName:"p"},"variable")," array until it contains four items. Once done, it will print the full array: ",Object(r.b)("inlineCode",{parentName:"p"},'["first", "data", "data", "data"]'),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),'inputs:\n  variable:\n    array:\n      default: ["first"]\nrun:\n  serial:\n    - serialLoop:\n        until:\n          - exists: $(variable[3])\n        run:\n          container:\n            image: { ref: alpine }\n            cmd:\n              - sh\n              - -c\n              - |\n                # this uses a mix of opctl variable expansion and sh variable expansion\n                value=\'$(variable)\'\n                echo -n "${value%?}" > /output\n                echo -n \', "data"]\' >> /output\n            files:\n              /output: $(variable)\n    - container:\n        image: { ref: alpine }\n        cmd: [echo, $(variable)]\n')))}b.isMDXComponent=!0},216:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),p=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o({},n,{},e)),t},b=function(e){var n=p(e.components);return(i.a.createElement(s.Provider,{value:n},e.children))},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},f=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,f=b["".concat(c,".").concat(d)]||b[d]||u[d]||r;return t?i.a.createElement(f,o({ref:n},s,{components:t})):i.a.createElement(f,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,c=new Array(r);c[0]=f;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[d]="string"==typeof e?e:a,c[1]=o;for(var s=2;s<r;s++)c[s]=t[s];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);